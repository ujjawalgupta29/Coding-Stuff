#include<bits/stdc++.h>
using namespace std;

#define ll long long int
#define v(N) vector<int> v(N)
#define ifor(i, a, b) for(int i=a; i<b; i++)
#define dfor(i, a, b) for(int i=a; i>=b; i--)

typedef map<int, int> MI;
typedef vector<int> VI;
typedef vector<vector<int>> VV;
static auto x = [](){
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);
    return nullptr;
}();

void solve1(ll N) 
{ 
    ll sum = N * (N+1) / 2;

    vector<ll> allocated(N+1, 0);
  
    ll person1 = sum / 2; 
  
    ll sum1=0, sum2=0;
  
    for (ll i = N; i > 0; i--) { 
  
        if (person1 - i >= 0) { 
            allocated[i] = 1; 
            person1 -= i; 
            sum1 += i;
        } 
        else { 
            sum2 += i;
        } 
    } 
    
    cout << abs(sum1-sum2) << endl;

    for(ll i=1; i<=N; i++)
    {
        if(allocated[i])
            cout << '1';
        else
        {
            cout << '0';
        }
        
    }
} 

void solve2(ll N)
{
    vector < ll > preComputedPatterns1 = {1, 3, 4, 2, 3, 1, 0, 0, 1, 1, 0, 0, 1};
    vector < string > preComputedPatterns2 = {"1", "01", "110", "0001", "01001", "001001", "0010110", "01101001", "000011001",
                                             "0100100101", "01000111010", "000000001101", "0000000110110"};
    ll rep = 0;

    while (N > 13){
        N -= 8;
        rep += 1;
    }

    cout << preComputedPatterns1[N - 1] << "\n";
    cout << preComputedPatterns2[N - 1];
    while (rep--) 
        cout << "01101001";
}

void solve3(ll N)
{
    vector < ll > preComputedPatterns1 = {1, 7, 18, 28, 25, 7, 26, 4, 5, 1, 12, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0,0, 1, 1, 0, 0, 1, 1, 0,0, 1, 1};
    vector < string > preComputedPatterns2 = {"1","10","110","1110","11110","101110","1110001","11001001","100101001","1111111010",
                                        "11110010110","110100011001","1111101111100","10100110010110","110100110010110","1001011001101001","10111110110100110",
                                        "101100101010100101","1100110110100111100","11111110101010011001","111101101101001101001","1111111111111110111000",
                                        "11111111100101110011100","111111111111010100001110","1111111111110010100001101","11111111110010110010010101",
                                        "111111111110110000001000111"};
    string ref = "0110100110010110";
    ll rep = 0;

    while (N >= 28){
        N -= 16;
        rep += 1;
    }
    cout << preComputedPatterns1[N - 1] << "\n";
    cout << preComputedPatterns2[N - 1] << "";

    while (rep--) 
        cout << ref;
}

void solve4(ll N)
{
    vector<pair<int,string>> preComputedPatterns = 
    {{-10,"0"},{1,"0"},{15,"10"},{64,"001"},{158,"0001"},
    {271,"00001"},{317,"000001"},{126,"0000001"},{34,"11010001"},
    {253,"111110001"},{13,"0101001001"},{92,"00000101001"},{30,"110010101001"},
    {47,"0010110101001"},{31,"11111110000101"},{2,"100001110101001"},{0,"1111000111110001"},
    {1,"11010111100000011"},{13,"111111001011110001"},{0,"0111101101001000011"},{0,"11110101001000100011"}
    ,{9,"111111111011011011100"},{1,"0000100101101110000011"},{0,"00000011011000111011100"}
    ,{0,"000000100111111111100001"},{1,"0000000010101011110000011"},{5,"11101011111011101111001010"},
    {0,"000000101010110011001101001"},{0,"0000000010001100101111111000"},{5,"11101111111011001110111010001"},
    {1,"000000000010100011011110101100"},{0,"0000000000001011111101111010100"},
    {0,"01101001100101101001011001101001"},{1,"000000000010001010111100001010101"},
    {1,"0000010000000100000101010000011101"},{0,"00000000001010101100001011010010101"},
    {0,"000000000000100001111011111010111000"},{1,"0000000001010000000000010110010111010"},
    {1,"00000000000000011011101011011100101010"},{0,"000000000000000110101011101000101011001"},
    {0,"0000000000000010101001011110111010111000"},{1,"00000000000000000010111011100010111000101"},
    {1,"000000000000000000010010000000000110010111"},{0,"0000000000000000101111101111111110000110001"},
    {0,"00000000000000000111110110101110101100101010"},{1,"000000000000000000010100100000000110010011011"},
    {1,"0000000000000000000011011011101010001110101010"},{0,"00000000000000000010101011011110111010101001001"},
    {0,"000000000000000000100010111011101010011001101010"},{1,"0000000000000000000010101010111110001011101000101"},
    {1,"00000000000000000000000000000000010010101100011011"},{0,"000000000000000000001110101000111000101010101010110"},
    {0,"0000000000000000000010101111110111101010100110111000"},{1,"00000000000000000000000000000001110010100101011010110"},{1,"000000000000000000000001101111101010101011001010001110"},
    {0,"0000001101100011101110001101001100101101001011001101001"},{0,"00000010011111111110000101101001100101101001011001101001"},
    {1,"000000001010101111000001101101001100101101001011001101001"},{1,"0000000000000000000000000000000000000011001010011010110011"},
    {0,"00000010101011001100110100101101001100101101001011001101001"},{0,"000000001000110010111111100001101001100101101001011001101001"},{1,"0000000000000000000000000000000000000000101010111111011100001"},{1,"00000000001010001101111010110001101001100101101001011001101001"},{0,"000000000000101111110111101010001101001100101101001011001101001"},{0,"0110100110010110100101100110100101101001100101101001011001101001"}};
    
    if (N < 65) {
        cout << preComputedPatterns[N].first << endl;
        cout << preComputedPatterns[N].second;
        return;
    }
    string s = "10010110011010010110100110010110";
    ll temp = 32 + (N % 32);
    cout << preComputedPatterns[temp].first << endl;
    N = (N - temp) / 32;
    cout << preComputedPatterns[temp].second;
    for (int i=0; i<N; i++) cout << s;
}

int main()
{
    ll k;
    cin >> k;

    ll t;
    cin >> t;

    while(t--)
    {
        ll N;
        cin >> N;

        if(k == 1)
        {
            solve1(N);
            cout << endl;
        }

        else if(k == 2)
        {
            solve2(N);
            cout << endl;
        }

        else if(k == 3)
        {
            solve3(N);
            cout << endl;
        }

        else if(k == 4)
        {
            solve4(N);
            cout << endl;
        }
    }
}